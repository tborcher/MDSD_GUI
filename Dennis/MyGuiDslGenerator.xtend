/*
 * generated by Xtext 2.15.0
 */
package gui_proj.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import gui_proj.myGuiDsl.*
import org.eclipse.xtext.naming.IQualifiedNameProvider
//import javax.inject.Inject
import com.google.inject.Inject
import java.io.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyGuiDslGenerator extends AbstractGenerator {
	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (g : resource.allContents.toIterable.filter(Gui)) {
			var isA3 = g.target == "AutoIt" || g.target == "Both"
			var isCS = g.target == "WinForms" || g.target == "Both"
			var fqn = g.fullyQualifiedName.toString("/")
			if(isA3) {
				fsa.generateFile("genGUI_" + fqn + ".au3", g.compile)
				fsa.generateFile("callbacks_" + fqn + ".au3", "hallo")
			}
			if(isCS) {
				fsa.generateFile("genGUI_" + fqn + ".cs", g.compile_cs)
				fsa.generateFile("callbacks_" + fqn + ".cs", "hallo")
			}
		}
	}

	def compile(Gui g) ''' 
	#Region include
	;~ general
	#include <GUIConstantsEx.au3>
	#include <WindowsConstants.au3>
	
	;~ ---spezific---
	;~ buttons Checkbox
	#include <ButtonConstants.au3>
	;~ inputfield
	#include <EditConstants.au3>
	;~ Label
	#include <StaticConstants.au3>
	#EndRegion END include
	
	Global «FOR e : g.guiObjects SEPARATOR ',' AFTER '\n'»«e.name»«ENDFOR»
	
	_initGUI()
	
	
	;~ Variablen m・sen einzigartig sein, damit sie bei der implementierung nicht vergeben sind. oder vom Benutzer definiert!
	
	;~ _UserFuncBeforeGUIStart
	
	GUISetState(@SW_SHOW)
	
	While 1
		$nMsg = GUIGetMsg()
		Switch $nMsg
			Case $GUI_EVENT_CLOSE
				Exit
	
			Case $GUI_EVENT_MINIMIZE
	
			Case $GUI_EVENT_RESTORE
	
			Case $GUI_EVENT_MAXIMIZE
	
			Case $GUI_EVENT_MOUSEMOVE
	
			Case $GUI_EVENT_PRIMARYDOWN
	
			Case $GUI_EVENT_PRIMARYUP
	
			Case $GUI_EVENT_SECONDARYDOWN
	
			Case $GUI_EVENT_SECONDARYUP
	
			Case $GUI_EVENT_RESIZED
	
			Case $GUI_EVENT_DROPPED
	
	
			Case $Button1
				_Button1Func()
			Case $Input1
	
			Case $idRadio_1 To $idRadio_3
				_RadioFunc($nMsg - $idRadio_1)
				;~ GUIGetMsg radiobutton beispiel
				;~ GUICtrlCreateGroup
				;~ GUIStartGroup
	
			Case $Checkbox1
				_Checkbox1Func()
	
	
		EndSwitch
	
		;~ _UserFuncWhileGUIRunning   Das w・de Blockieren!  evtl lung
	
	WEnd
	
	
	Func _initGUI()
		$Form1 = GUICreate("Form1", 350, 250, 200, 200)
		$Button1 = GUICtrlCreateButton("TestInputBox", 80, 140, 75, 25)
		$Input1 = GUICtrlCreateInput("Input1", 80, 110, 121, 21)
		$idRadio_1 = GUICtrlCreateRadio("Radio &0", 180, 20)
		             GUICtrlCreateRadio("Radio &1", 180, 50)
		$idRadio_3 = GUICtrlCreateRadio("Radio &2", 180, 80)
		$Label1 = GUICtrlCreateLabel("Label1", 100, 10, 36, 17)
		$Checkbox1 = GUICtrlCreateCheckbox("Checkbox1", 80, 30, 97, 17)
	EndFunc
	
'''

	def compile_cs(Gui g) '''
namespace «g.fullyQualifiedName» {
	partial class «g.name» {
		/// <summary>
		/// Erforderliche Designervariable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Verwendete Ressourcen bereinigen.
		/// </summary>
		/// <param name="disposing">True, wenn verwaltete Ressourcen gelöscht werden sollen; andernfalls False.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Vom Windows Form-Designer generierter Code

		/// <summary>
		/// Erforderliche Methode für die Designerunterstützung.
		/// Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
		/// </summary>
		private void InitializeComponent() {
«««			/// Initializer seperate to allow them referencing each other.
			«FOR e : g.guiObjects SEPARATOR '\n' AFTER '\n'»
				this.«e.name» = new System.Windows.Forms.«e.fullyQualifiedName» ();
			«ENDFOR»
			this.SuspendLayout();
			«FOR e : g.guiObjects SEPARATOR '\n' AFTER '\n'»
				«e.createMember_cs»
			«ENDFOR»
«««			/// Outsourced for convenience, but I guess this can be moved into her as well.
			«g.createGUI»
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		#endregion

		«FOR e : g.guiObjects SEPARATOR '\n\t\t' AFTER '\n'»
			private System.Windows.Forms.«e.fullyQualifiedName» «e.name»;
		«ENDFOR»
	}
}'''


def createMember_cs(GUIElement e)'''«««//{ Folding mark
// 
// «e.name»
// 
«««	// Label, CheckBox --> Will discard ".Size" (?)
this.«e.name».AutoSize = true;
«««	// Button, TextBox, RadioButton, Label, CheckBox
«««this.«e.name».Location = new System.Drawing.Point(«e.left», «e.top»);
«««	// Button, TextBox, RadioButton, Label, CheckBox (this is required, I think)
this.«e.name».Name = "«e.name»";
«««	// Button, TextBox, RadioButton, Label, CheckBox
«««		/// Does Size regenerate based on ".Text" if missing?
«««this.«e.name».Size = new System.Drawing.Size(«e.width», «e.height»);
«««	// Button, TextBox, RadioButton, Label, CheckBox
«««		/// Running number over all elements; Is that really required or implicit from VS?
this.«e.name».TabIndex = SEQNO;
«««	// Button, RadioButton, Label, CheckBox
«««	this.«e.name».Text = "«e.display»";
«««	// Button, CheckBox
this.«e.name».UseVisualStyleBackColor = true;
«««	// Button, RadioButton, CheckBox
«««	if e.hasHandler then
«««		foreach(h in e.handler) do
«««			this.«e.name».«h.type» += new System.EventHandler(this.«h.name»);
this.Controls.Add(this.«e.name»);
'''//} Folding mark
/* Define Member "e" as
--	name    :str: VariableName >> default: ToLowercase(class) + SEQNO
--	class   :str: Button	or	System.Windows.Forms.Button, if using does not work.
--	left    :int: Position in px from left border
--	top     :int: Position in px from top border
--	width   :int: Size in X-Direction
--	height  :int: Size in Y-Direction >> default seems to be 17
--	display :str: Text to be displayed >> default: $name (if no sideeffects) or null (if the case)
--	handler :xxx: Collection of Callbacks >> default: null
--	parent  :GuiElement: Parent Element >> default: GUI-Root (??)
//*/

def createGUI(Gui g)'''«««//{ Folding mark
// 
// «g.name»
// 
«««	/// Default (MinScale, MaxScale)
this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
«««	/// Default
this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
this.ClientSize = new System.Drawing.Size(«g.width», «g.height»);
«««	<<{{assignMember}}>> --> easier done in createMember_cs
«««	/// Default
this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
«««	/// Default
this.Location = new System.Drawing.Point(200, 200);
this.Name = "«g.name»";
this.Text = "«g.name»";
«««	//------------
«««	with GUI gui having 
«««	--	name    :str: Title of Window
«««	--	width   :int: Size in X-Direction >> default 300 (?)
«««	--	height  :int: Size in Y-Direction >> default 300 (?)
'''//}

}

