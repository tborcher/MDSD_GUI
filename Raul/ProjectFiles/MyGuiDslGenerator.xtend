/*
 * generated by Xtext 2.15.0
 */
package gui_proj.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import gui_proj.myGuiDsl.*
import org.eclipse.xtext.naming.IQualifiedNameProvider
//import javax.inject.Inject
import com.google.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyGuiDslGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider

	var callbacksFileName = ""
	var guiFileName = ""

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (g : resource.allContents.toIterable.filter(Gui)) {
			guiFileName = "genGUI_" + g.fullyQualifiedName.toString("/") + ".au3"//wofür fullyqulified name? g.name geht auch?
			callbacksFileName = "callbacks_" + g.fullyQualifiedName.toString("/") + ".au3"
			fsa.generateFile(guiFileName,g.compile)
            
            fsa.generateFile(callbacksFileName, callbacks(g))
            
        }
	}
	
	
	
	def compile(Gui g) ''' 
	#Region include
	;~ general
	#include <GUIConstantsEx.au3>
	#include <WindowsConstants.au3>
	
	;~ ---spezific---
	;~ buttons Checkbox
	#include <ButtonConstants.au3>
	;~ inputfield
	#include <EditConstants.au3>
	;~ Label
	#include <StaticConstants.au3>
	#EndRegion END include
	
	Global «FOR e : g.guiObjects SEPARATOR ',' AFTER '\n'»$«e.name»«ENDFOR»
	
	_initGUI()
	
	GUISetState(@SW_SHOW)
	
	While 1
		$nMsg = GUIGetMsg()
		Switch $nMsg
			Case $GUI_EVENT_CLOSE
				Exit
	
	«FOR e : g.guiObjects»«
		IF e instanceof InputField»«ELSE»		Case $«e.name»
				_«e.name»Func()
	«ENDIF»«ENDFOR»
	
		EndSwitch
	
	WEnd
	

	
	Func _initGUI()
		$«g.name» = GUICreate("«g.titel»", «g.width», «g.height»)
	«FOR e : g.guiObjects»	«e.compile»
	«ENDFOR»EndFunc
	'''
		
		
		
		
	
	//create GUIElements in initGUI
	def compile(GUIElement gE) '''«switch gE {
	TextLabel:   _initGUI_TextLabel(gE)
	InputField:  _initGUI_InputField(gE)
	Button:      _initGUI_Button(gE)
	RadioButton: _initGUI_RadioButton(gE)
	CheckBox:    _initGUI_CheckBox(gE)
	default: 'ERROR'
	}»'''	
	
	
	def String _initGUI_TextLabel(GUIElement gE){
		val d = (gE as TextLabel).description
		return "$" + gE.name + " = GUICtrlCreateLabel(\"" + d.text + "\", " + d.left + ", " + d.top + optionalWidthHeight(d) + ")"
	}
	
	
	def String _initGUI_InputField(GUIElement gE){
		val d = (gE as InputField).description
		return "$" + gE.name + " = GUICtrlCreateInput(\"" + d.text + "\", " + d.left + ", " + d.top + optionalWidthHeight(d) + ")"
	}
	
	def String _initGUI_Button(GUIElement gE){
		val d = (gE as Button).description
		return "$" + gE.name + " = GUICtrlCreateButton(\"" + d.text + "\", " + d.left + ", " + d.top + optionalWidthHeight(d) + ")"
	}
	
	def String _initGUI_RadioButton(GUIElement gE){
		val d = (gE as RadioButton).description
		return "$" + gE.name + " = GUICtrlCreateRadio(\"" + d.text + "\", " + d.left + ", " + d.top + optionalWidthHeight(d) + ")"
	}
	
	def String _initGUI_CheckBox(GUIElement gE){
		val d = (gE as CheckBox).description
		return "$" + gE.name + " = GUICtrlCreateCheckbox(\"" + d.text + "\", " + d.left + ", " + d.top + optionalWidthHeight(d) + ")"
	}
	
	def String optionalWidthHeight(GUIElementDescription gED){
		var ret = ""
		
		if((gED.width == 0)&&(gED.height == 0)){
		}else if((gED.width != 0)&&(gED.height == 0)){
			ret += ", " +  gED.width
		}else if((gED.width != 0)&&(gED.height != 0)){
			ret += ", " +  gED.width + ", " +  gED.height
		}else if((gED.width == 0)&&(gED.height != 0)){
			ret += ", Default, " +  gED.height
		}
		
		ret
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//===================================Callbacks==========================================================================

	def callbacks(Gui g) '''
	#include <MsgBoxConstants.au3>
	#include "«guiFileName»"
	
	«FOR e : g.guiObjects»«
			IF e instanceof InputField»«ELSE»Func _«e.name»Func()
		MsgBox($MB_SYSTEMMODAL, "«e.name»", "«e.name»")
	EndFunc
	
	«ENDIF»«ENDFOR»
	'''






}






	

