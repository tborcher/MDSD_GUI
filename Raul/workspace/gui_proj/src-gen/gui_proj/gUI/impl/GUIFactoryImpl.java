/**
 * generated by Xtext 2.15.0
 */
package gui_proj.gUI.impl;

import gui_proj.gUI.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GUIFactoryImpl extends EFactoryImpl implements GUIFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GUIFactory init()
  {
    try
    {
      GUIFactory theGUIFactory = (GUIFactory)EPackage.Registry.INSTANCE.getEFactory(GUIPackage.eNS_URI);
      if (theGUIFactory != null)
      {
        return theGUIFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GUIFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GUIFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GUIPackage.GUI: return createGui();
      case GUIPackage.GUI_ELEMENT: return createGUIElement();
      case GUIPackage.GUI_ELEMENT_DESCRIPTION: return createGUIElementDescription();
      case GUIPackage.TEXT_LABEL: return createTextLabel();
      case GUIPackage.INPUT_FIELD: return createInputField();
      case GUIPackage.BUTTON: return createButton();
      case GUIPackage.RADIO_BUTTON: return createRadioButton();
      case GUIPackage.CHECK_BOX: return createCheckBox();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Gui createGui()
  {
    GuiImpl gui = new GuiImpl();
    return gui;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GUIElement createGUIElement()
  {
    GUIElementImpl guiElement = new GUIElementImpl();
    return guiElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GUIElementDescription createGUIElementDescription()
  {
    GUIElementDescriptionImpl guiElementDescription = new GUIElementDescriptionImpl();
    return guiElementDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TextLabel createTextLabel()
  {
    TextLabelImpl textLabel = new TextLabelImpl();
    return textLabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InputField createInputField()
  {
    InputFieldImpl inputField = new InputFieldImpl();
    return inputField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Button createButton()
  {
    ButtonImpl button = new ButtonImpl();
    return button;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RadioButton createRadioButton()
  {
    RadioButtonImpl radioButton = new RadioButtonImpl();
    return radioButton;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CheckBox createCheckBox()
  {
    CheckBoxImpl checkBox = new CheckBoxImpl();
    return checkBox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GUIPackage getGUIPackage()
  {
    return (GUIPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GUIPackage getPackage()
  {
    return GUIPackage.eINSTANCE;
  }

} //GUIFactoryImpl
