/*
 * generated by Xtext 2.15.0
 */
package gui_proj.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import gui_proj.myGuiDsl.*
import org.eclipse.xtext.naming.IQualifiedNameProvider
//import javax.inject.Inject
import com.google.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyGuiDslGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider

	var callbacksFileName = ""
	var guiFileName = ""

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (g : resource.allContents.toIterable.filter(Gui)) {
			var isCS = g.target == "WinForms" || g.target == "Both"
			var fqn = g.fullyQualifiedName.toString("/")
			if(isA3) {
				guiFileName = "genGUI_" + g.fullyQualifiedName.toString("/") + ".au3"//why fullyqulified name? g.name geht auch?
				callbacksFileName = "callbacks_" + g.fullyQualifiedName.toString("/") + ".au3"
				fsa.generateFile(guiFileName,g.compile)
				fsa.generateFile(callbacksFileName, callbacks(g))
            }
			if(isCS) {
				fsa.generateFile("genGUI_" + fqn + ".cs", g.compile_cs)
				fsa.generateFile("callbacks_" + fqn + ".cs", "hallo")
			}
        }
	}
	
	
	
	def compile(Gui g) ''' 
	#Region include
	;~ general
	#include <GUIConstantsEx.au3>
	#include <WindowsConstants.au3>
	
	;~ ---spezific---
	;~ buttons Checkbox
	#include <ButtonConstants.au3>
	;~ inputfield
	#include <EditConstants.au3>
	;~ Label
	#include <StaticConstants.au3>
	#EndRegion END include
	
	Global «FOR e : g.guiObjects SEPARATOR ',' AFTER '\n'»$«e.name»«ENDFOR»
	
	_initGUI()
	
	GUISetState(@SW_SHOW)
	
	While 1
		$nMsg = GUIGetMsg()
		Switch $nMsg
			Case $GUI_EVENT_CLOSE
				Exit
	
	«FOR e : g.guiObjects»«
		IF e instanceof InputField»«ELSE»		Case $«e.name»
				_«e.name»Func()
	«ENDIF»«ENDFOR»
	
		EndSwitch
	
	WEnd
	

	
	Func _initGUI()
		$«g.name» = GUICreate("«g.titel»", «g.width», «g.height»)
	«FOR e : g.guiObjects»	«e.compile»
	«ENDFOR»EndFunc
	'''
	//create GUIElements in initGUI
	def compile(GUIElement gE) '''«switch gE {
	TextLabel:   _initGUI_TextLabel(gE)
	InputField:  _initGUI_InputField(gE)
	Button:      _initGUI_Button(gE)
	RadioButton: _initGUI_RadioButton(gE)
	CheckBox:    _initGUI_CheckBox(gE)
	default: 'ERROR'
	}»'''
	
	
	def String _initGUI_TextLabel(GUIElement gE){
		val d = (gE as TextLabel).description
		return "$" + gE.name + " = GUICtrlCreateLabel(\"" + d.text + "\", " + d.left + ", " + d.top + optionalWidthHeight(d) + ")"
	}
	
	
	def String _initGUI_InputField(GUIElement gE){
		val d = (gE as InputField).description
		return "$" + gE.name + " = GUICtrlCreateInput(\"" + d.text + "\", " + d.left + ", " + d.top + optionalWidthHeight(d) + ")"
	}
	
	def String _initGUI_Button(GUIElement gE){
		val d = (gE as Button).description
		return "$" + gE.name + " = GUICtrlCreateButton(\"" + d.text + "\", " + d.left + ", " + d.top + optionalWidthHeight(d) + ")"
	}
	
	def String _initGUI_RadioButton(GUIElement gE){
		val d = (gE as RadioButton).description
		return "$" + gE.name + " = GUICtrlCreateRadio(\"" + d.text + "\", " + d.left + ", " + d.top + optionalWidthHeight(d) + ")"
	}
	
	def String _initGUI_CheckBox(GUIElement gE){
		val d = (gE as CheckBox).description
		return "$" + gE.name + " = GUICtrlCreateCheckbox(\"" + d.text + "\", " + d.left + ", " + d.top + optionalWidthHeight(d) + ")"
	}
	
	def String optionalWidthHeight(GUIElementDescription gED){
		var ret = ""
		
		if((gED.width == 0)&&(gED.height == 0)){
		}else if((gED.width != 0)&&(gED.height == 0)){
			ret += ", " +  gED.width
		}else if((gED.width != 0)&&(gED.height != 0)){
			ret += ", " +  gED.width + ", " +  gED.height
		}else if((gED.width == 0)&&(gED.height != 0)){
			ret += ", Default, " +  gED.height
		}
		
		ret
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//===================================Callbacks==========================================================================

	def callbacks(Gui g) '''
	#include <MsgBoxConstants.au3>
	#include "«guiFileName»"
	
	«FOR e : g.guiObjects»«
			IF e instanceof InputField»«ELSE»Func _«e.name»Func()
		MsgBox($MB_SYSTEMMODAL, "«e.name»", "«e.name»")
	EndFunc
	
	«ENDIF»«ENDFOR»
	'''


//--------------------------------


	def compile_cs(Gui g) '''
namespace «g.fullyQualifiedName» {
	partial class «g.name» {
		/// <summary>
		/// Erforderliche Designervariable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Verwendete Ressourcen bereinigen.
		/// </summary>
		/// <param name="disposing">True, wenn verwaltete Ressourcen gelöscht werden sollen; andernfalls False.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Vom Windows Form-Designer generierter Code

		/// <summary>
		/// Erforderliche Methode für die Designerunterstützung.
		/// Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
		/// </summary>
		private void InitializeComponent() {
«««			/// Initializer seperate to allow them referencing each other.
			«FOR e : g.guiObjects SEPARATOR '\n' AFTER '\n'»
				this.«e.name» = new System.Windows.Forms.«e.fullyQualifiedName» ();
			«ENDFOR»
			this.SuspendLayout();
			«FOR e : g.guiObjects SEPARATOR '\n' AFTER '\n'»
				«e.createMember_cs»
			«ENDFOR»
«««			/// Outsourced for convenience, but I guess this can be moved into her as well.
			«g.createGUI»
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		#endregion

		«FOR e : g.guiObjects SEPARATOR '\n\t\t' AFTER '\n'»
			private System.Windows.Forms.«e.fullyQualifiedName» «e.name»;
		«ENDFOR»
	}
}'''


def createMember_cs(GUIElement e)'''«««//{ Folding mark
// 
// «e.name»
// 
«««	// Label, CheckBox --> Will discard ".Size" (?)
this.«e.name».AutoSize = true;
«««	// Button, TextBox, RadioButton, Label, CheckBox
this.«e.name».Location = new System.Drawing.Point(«e.left», «e.top»);
«««	// Button, TextBox, RadioButton, Label, CheckBox (this is required, I think)
this.«e.name».Name = "«e.name»";
«««	// Button, TextBox, RadioButton, Label, CheckBox
«««		/// Does Size regenerate based on ".Text" if missing?
this.«e.name».Size = new System.Drawing.Size(«e.width», «e.height»);
«««	// Button, TextBox, RadioButton, Label, CheckBox
«««		/// Running number over all elements; Is that really required or implicit from VS?
this.«e.name».TabIndex = SEQNO;
«««	// Button, RadioButton, Label, CheckBox
«««	this.«e.name».Text = "«e.display»";
«««	// Button, CheckBox
this.«e.name».UseVisualStyleBackColor = true;
«««	// Button, RadioButton, CheckBox
«««	if e.hasHandler then
«««		foreach(h in e.handler) do
«««			this.«e.name».«h.type» += new System.EventHandler(this.«h.name»);
this.Controls.Add(this.«e.name»);
'''//} Folding mark
/* Define Member "e" as
--	name    :str: VariableName >> default: ToLowercase(class) + SEQNO
--	class   :str: Button	or	System.Windows.Forms.Button, if using does not work.
--	left    :int: Position in px from left border
--	top     :int: Position in px from top border
--	width   :int: Size in X-Direction
--	height  :int: Size in Y-Direction >> default seems to be 17
--	display :str: Text to be displayed >> default: $name (if no sideeffects) or null (if the case)
--	handler :xxx: Collection of Callbacks >> default: null
--	parent  :GuiElement: Parent Element >> default: GUI-Root (??)
//*/

def createGUI(Gui g)'''«««//{ Folding mark
// 
// «g.name»
// 
«««	/// Default (MinScale, MaxScale)
this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
«««	/// Default
this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
this.ClientSize = new System.Drawing.Size(«g.width», «g.height»);
«««	<<{{assignMember}}>> --> easier done in createMember_cs
«««	/// Default
this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
«««	/// Default
this.Location = new System.Drawing.Point(200, 200);
this.Name = "«g.name»";
this.Text = "«g.name»";
«««	//------------
«««	with GUI gui having 
«««	--	name    :str: Title of Window
«««	--	width   :int: Size in X-Direction >> default 300 (?)
«««	--	height  :int: Size in Y-Direction >> default 300 (?)
'''//}





}






	

